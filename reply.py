from person import Person, ChatState

import uuid

import vk_api, vk
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id

from event import Event

from FuncsWithDataBase import newEvent, registerPerson

import re, datetime, copy, requests

events = [Event("8c9fb997-2436-4274-9d13-c49567cb2d35", "C–æ–±—ã—Ç–∏–µ 1", "2021-09-01", 146236825, [],"11:40", "–æ–ø–∏—Å–∞–Ω–∏–µ 1", "–∑–∞–≥–æ–ª–æ–≤–æ–∫ 1"),
          Event("b1ede9c8-b171-413b-bda5-9eafdafb51f7", "–°–æ–±—ã—Ç–∏–µ 2", "2021-09-02", 146236825, [],"11:40", "–æ–ø–∏—Å–∞–Ω–∏–µ 2", "–∑–∞–≥–æ–ª–æ–≤–æ–∫ 2"),
          Event("396dd557-3236-469b-a90e-f1c2c80bf3d3", "–°–æ–±—ã—Ç–∏–µ 4", "2021-09-02", 146236825, [],"11:40", "–æ–ø–∏—Å–∞–Ω–∏–µ 4", "–∑–∞–≥–æ–ª–æ–≤–æ–∫ 3")]
questions = [["–í–æ–ø—Ä–æ—Å 1", "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1"], ["–í–æ–ø—Ä–æ—Å 2", "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 2"], ["–í–æ–ø—Ä–æ—Å 3", "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 3"], ["–í–æ–ø—Ä–æ—Å 4", "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 4"]]
unFinishedQuestions = []
unFinishedEvents = []
registeringPersons = {}
personsAnswering = {}

menuKeyboard = vk_api.keyboard.VkKeyboard(inline=True)


def makeQuestionMessage(answers:list, person):
    kb = vk_api.keyboard.VkKeyboard(inline=True)
    buttons = ['üî∏', 'üîπ', '‚óΩ', '‚óæ', 'üî∫', 'üî≥']
    message = ""
    answersButtons = {}
    for i in range(len(answers)):
        message += buttons[i] + ' ' + answers[i] + "\n"
        kb.add_button(buttons[i])
        answersButtons[buttons[i]] = answers[i]
    personsAnswering[person] = answersButtons
    return [message, kb]

def changeMenuKeyboard(questions):
    menuKeyboard.lines = [[]]
    menuKeyboard.keyboard = {
        'one_time': menuKeyboard.one_time,
        'inline': menuKeyboard.inline,
        'buttons': menuKeyboard.lines
    }
    for i in range(len(questions)):
        menuKeyboard.add_button(questions[i][0])
        if i%2 == 1:
            menuKeyboard.add_line()
    if len(questions)%2 != 0:
        menuKeyboard.add_line()
    menuKeyboard.add_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")



changeMenuKeyboard(questions)

adminMenuKeyboard = vk_api.keyboard.VkKeyboard(inline=True)

adminMenuKeyboard.add_button("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
adminMenuKeyboard.add_line()
adminMenuKeyboard.add_button("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
adminMenuKeyboard.add_line()
adminMenuKeyboard.add_button("–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å")

backToMenuKeyboard = vk_api.keyboard.VkKeyboard(inline=True)
backToMenuKeyboard.add_button("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")

backKeyboard = vk_api.keyboard.VkKeyboard(inline=True)
backKeyboard.add_button("–ù–∞–∑–∞–¥")

eventsKeyboard = vk_api.keyboard.VkKeyboard(inline=True)



def changeEventsKeyBoard(events):
    eventsKeyboard.lines = [[]]
    eventsKeyboard.keyboard = {
        'one_time': eventsKeyboard.one_time,
        'inline': eventsKeyboard.inline,
        'buttons': eventsKeyboard.lines
    }
    for event in events:
        eventsKeyboard.add_button(event.date[5:] + " - " + event.name, color="positive")
        if events.index(event) < len(events) - 1:
            eventsKeyboard.add_line()

changeEventsKeyBoard(events)

def makeQuestionsKeyboard():
    questionsKeyboard = menuKeyboard
    questionsKeyboard.lines.pop(-1)
    questionsKeyboard.keyboard ={
        'one_time': questionsKeyboard.one_time,
        'inline': questionsKeyboard.inline,
        'buttons': questionsKeyboard.lines}
    questionsKeyboard.add_line()
    questionsKeyboard.add_button("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    return questionsKeyboard

vk_session = vk_api.VkApi(token='da09561f3d70f75f9bfa07a169c2e8a092e2ceded34bcafe0b48904208e83475d2837187d6d6ff562c79d')
Lsvk = vk_session.get_api()

def getAnswer(questionText):
    for question in questions:
        if question[0] == questionText:
            return question[1]
    return False

def showEvents(event, person):
    message = "–ü–æ–ª–µ–∑–Ω—ã–µ (–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ!) –≤–µ–±–∏–Ω–∞—Ä—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n"
    months = {1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
              9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"}
    for ev in events:
        message += str(datetime.datetime.strptime(ev.date, "%Y-%m-%d").day) + " " + \
                   months[datetime.datetime.strptime(ev.date, "%Y-%m-%d").month] + \
                   ", " + ev.time + " –ø–æ –ú–°–ö - "+ ev.header + "\n" + ev.description + "\n\n"
    Lsvk.messages.send(
        random_id=get_random_id(),
        message=message,
        keyboard=eventsKeyboard.get_keyboard(),
        user_ids=event.user_id
    )
    if person.admin:
        Lsvk.messages.send(random_id=get_random_id(),
                           message='–î–µ–π—Å—Ç—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞',
                           keyboard=adminMenuKeyboard.get_keyboard(),
                           user_ids=event.user_id)

replys = []

def inEventsReply(person, event):
    if event.message == "/I_am_admin5726":
        person.admin = True
        showEvents(event, person)
    elif event.message in list(map(lambda event: event.date[5:] + " - " + event.name, events)):
        i = list(map(lambda event: event.date[5:] + " - " + event.name, events)).index(event.message)
        person.chatState = ChatState.REGISTERING_EMAIL
        Lsvk.messages.send(random_id=get_random_id(),
                           message=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π Email –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä",
                           keyboard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id
                           )
        registeringPersons[person] = events[i]
        person.chatState = ChatState.REGISTERING_EMAIL
        print(person.chatState)
    else:
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–¢–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç",
                           keyboard=eventsKeyboard.get_keyboard(),
                           user_ids=event.user_id
                           )
replys.append(inEventsReply)

def inEventsReplyAdmin(person, event):
    if event.message in list(map(lambda event: event.date[5:] + " - " + event.name, events)):
        i = list(map(lambda event: event.date[5:] + " - " + event.name, events)).index(event.message)
        person.chatState = ChatState.REGISTERING_EMAIL
        Lsvk.messages.send(random_id=get_random_id(),
                           message=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π Email –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä",
                           keyboard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id
                           )
        registeringPersons[person] = events[i]
        person.chatState = ChatState.REGISTERING_EMAIL
        print(person.chatState)

    elif event.message == "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        person.chatState = ChatState.MAKING_QUESTION
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í–≤–µ–¥–∏—Ç–µ –≤–æ—Ä–æ—Å",
                           keyboard=backToMenuKeyboard.get_keyboard(),
                           user_ids=event.user_id)
    elif event.message == "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
                           keyboard=backToMenuKeyboard.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.MAKING_EVENT
    elif event.message == "–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —É–¥–∞–ª–∏—Ç—å",
                           keyboard=makeQuestionsKeyboard().get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.DELETING_QUESTION
    else:
        Lsvk.messages.send(
            random_id=get_random_id(),
            message="–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç –≤ –º–µ–Ω—é",
            user_ids=event.user_id
        )

def registeringNameReply(person, event):
    if event.message == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        showEvents(event, person)
        person.chatState = ChatState.IN_EVENTS
    elif len(event.message) < 20:
        Lsvk.messages.send(
            random_id=get_random_id(),
            message='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ',
            keyboard=eventsKeyboard.get_keyboard(),
            user_ids=event.user_id
        )
        person.name = event.message
        person.chatState = ChatState.REGISTERING_EVENT
    else:
        Lsvk.messages.send(
            random_id=get_random_id(),
            message='–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è',
            keyboard=menuKeyboard.get_keyboard(),
            user_ids=event.user_id
        )
replys.append(registeringNameReply)

def registeringEventReply(person, event):
    if event.message == "–ù–∞–∑–∞–¥":
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í–≤–µ–¥–∏—Ç–µ –∏–º—è",
                           keyboard=backToMenuKeyboard.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.REGISTERING_NAME
    else:
        if event.message in list(map(lambda event: event.name, events)):
            i = list(map(lambda event: event.name, events)).index(event.message)
            person.chatState = ChatState.REGISTERING_EMAIL
            Lsvk.messages.send(random_id=get_random_id(),
                               message=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π Email –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ {events[i].name}",
                               keyboard=backKeyboard.get_keyboard(),
                               user_ids=event.user_id
                               )
            registeringPersons[person] = events[i]
            person.chatState = ChatState.REGISTERING_EMAIL
            print(person.chatState)
        else:
            Lsvk.messages.send(random_id=get_random_id(),
                               message="–¢–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç",
                               keyboard=eventsKeyboard.get_keyboard(),
                               user_ids=event.user_id
                               )
replys.append(registeringEventReply)


def justStartedReply(person, event):
    mnkeyboard = vk_api.keyboard.VkKeyboard(inline=True)
    mnkeyboard.add_button("–ú–µ–Ω—é")
    r = requests.get(f"https://api.vk.com/method/users.get?user_ids={event.user_id}&fields=bdate&access_token=da09561f3d70f75f9bfa07a169c2e8a092e2ceded34bcafe0b48904208e83475d2837187d6d6ff562c79d&v=5.131")
    name = r.content.decode("utf-8").split('"first_name":"')[1].split('"')[0]
    r.close()
    Lsvk.messages.send(
        random_id=get_random_id(),
        message=f'–ü—Ä–∏–≤–µ—Ç, {name}!\n\n–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–æ–∫–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—å–µ—Ä—É –≤ –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.'
                ' –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, —è –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!\n\n–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é üëá',
        keyboard=mnkeyboard.get_keyboard(),
        user_ids=event.user_id
    )
    person.name = name
    person.chatState = ChatState.MENU_POLING
replys.append(justStartedReply)

def menuPollingReply(person, event):
    if event.message == "–ú–µ–Ω—é":
        showEvents(person=person, event=event)
        person.chatState = ChatState.IN_EVENTS
replys.append(menuPollingReply)


def inQuestionReply(person, event):
    if event.message == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        showEvents(event, person)
        person.chatState = ChatState.IN_EVENTS
    else:
        Lsvk.messages.send(
            random_id=get_random_id(),
            message='–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç',
            keyboard=backToMenuKeyboard.get_keyboard(),
            user_ids=event.user_id
        )
replys.append(inQuestionReply)


def making_question_reply(person, event):
    if event.message == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        showEvents(event, person)
        person.chatState = ChatState.IN_EVENTS
    elif len(event.message) <= 20:
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å",
                           keyboaard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id)
        unFinishedQuestions.append([event.message, person.id])
        person.chatState = ChatState.MAKING_ANSWER

    else:
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–æ—Ä–æ—á–µ",
                           keyboaard=backToMenuKeyboard.get_keyboard(),
                           user_ids=event.user_id)
replys.append(making_question_reply)

def makingAnswerReply(person, event):
    if event.message == "–ù–∞–∑–∞–¥":
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í–≤–µ–¥–∏—Ç–µ –≤–æ—Ä–æ—Å",
                           keyboaard=backToMenuKeyboard.get_keyboard(),
                           user_ids=event.user_id)
        for i in range(len(unFinishedQuestions)):
            if unFinishedQuestions[i][1] == person.id:
                unFinishedQuestions.remove(unFinishedQuestions[i])
                break
    else:
        for i in range(len(unFinishedQuestions)):
            if unFinishedQuestions[i][1] == person.id:
                questions.append([unFinishedQuestions[i][0], event.message])
                changeMenuKeyboard(questions)
                unFinishedQuestions.remove(unFinishedQuestions[i])
                break
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í—Å—ë –≥–æ—Ç–æ–≤–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?",
                           keyboard=backToMenuKeyboard.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.IN_QUESTION
replys.append(makingAnswerReply)

def makingEventReply(person, event):
    if event.message == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        showEvents(event, person)
        person.chatState = ChatState.IN_EVENTS
    elif len(event.message) <= 20:
        unFinishedEvents.append(Event(uuid.uuid4(), event.message, None, person.id))
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î",
                           keyboaard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.MAKING_DATE
    else:
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –≤—ã–±–∏—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—á–µ",
                           keyboard=backToMenuKeyboard.get_keyboard(),
                           user_ids=event.user_id)
replys.append(makingEventReply)

def makingDateReply(person, event):
    if event.message == "–ù–∞–∑–∞–¥":
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
                           keyboard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.MAKING_EVENT
    elif re.fullmatch('\d{4}-\d\d-\d\d', event.message) \
            and int(event.message[0:4])>=2021 \
            and 12>=int(event.message[5:7])>0 \
            and 31>=int(event.message[8:10])>0:
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
                           keyboard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.MAKING_TIME
        unFinishedEvents[(list(map(lambda evenent: event.adminId, events)).index(person.id))].date = event.message
    else:
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î",
                           keyboard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id)
replys.append(makingDateReply)

def deleteQuestionReply(person, event):
    if event.message == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        showEvents(event, person)
        person.chatState = ChatState.IN_EVENTS
    else:
        for i in range(len(questions)):
            if questions[i][0] == event.message:
                questions.remove(questions[i])
                changeMenuKeyboard(questions)
                Lsvk.messages.send(random_id=get_random_id(),
                                   message="–í—Å—ë –≥–æ—Ç–æ–≤–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?",
                                   keyboard=backToMenuKeyboard.get_keyboard(),
                                   user_ids=event.user_id)
                person.chatState = ChatState.IN_QUESTION
                break
        if i == len(questions) - 1:
            Lsvk.messages.send(random_id=get_random_id(),
                               message="–¢–∞–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç, –≤—ã–±–∏—Ä–∏—Ç–µ —Å—É—â–µ—Å—Å—Ç–≤—É—é—â–∏–π",
                               keyboard=backToMenuKeyboard.get_keyboard(),
                               user_ids=event.user_id)
replys.append(deleteQuestionReply)


def registeringEmail(person, event):
    if event.message == "–ù–∞–∑–∞–¥":
        showEvents(event, person)
        person.chatState = ChatState.IN_EVENTS
    elif re.search(r'[A-Za-z0-9]+@[A-Za-z0-9]+\.[A-Za-z0-9]+',event.message):
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                           keyboard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.REGISTERING_PHONE
        person.email = event.message
    else:
        print("ok")
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
                           keyboard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id)
replys.append(registeringEmail)

def registeringPhone(person, event):
    clubEvent = registeringPersons.get(person)
    if event.message == "–ù–∞–∑–∞–¥":
        Lsvk.messages.send(random_id=get_random_id(),
                           message=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π Email –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ {clubEvent.name}",
                           keyboard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.REGISTERING_EMAIL
    elif re.search(r'^\+\d+$', event.message) or re.search(r'^\d+$', event.message):
        months = {1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
                  9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"}
        if (datetime.datetime.strptime(clubEvent.date, "%Y-%m-%d") - datetime.datetime.today()).days == -1:
            dateString = " —Å–µ–≥–æ–¥–Ω—è "
        elif (datetime.datetime.strptime(clubEvent.date, "%Y-%m-%d") - datetime.datetime.today()).days == 0:
            dateString = " –∑–∞–≤—Ç—Ä–∞ "
        else:
            dateString = str(int(clubEvent.date.split("-")[2])) + " " + months[int(clubEvent.date.split("-")[1])]
        refsKB = vk_api.keyboard.VkKeyboard(inline=True)
        refsKB.add_openlink_button("üíº Changellenge", "https://t.me/changellenge")
        refsKB.add_line()
        refsKB.add_openlink_button("Changellenge ¬ª Education", "https://t.me/changellenge_education")
        refsKB.add_line()
        refsKB.add_button("üí° –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã","positive")
        Lsvk.messages.send(random_id=get_random_id(),
                           message=f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –ø—Ä–æ–π–¥–µ—Ç " + dateString + " –≤ "
                                   + clubEvent.time + "–í —Ç–æ—Ç –∂–µ –¥–µ–Ω—å –ø—Ä–∏—à–ª—é –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ö–æ–¥.\n\n"
                                                      "–ü–æ–∫–∞ –≤—ã –∂–¥—ë—Ç–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—Å –≤ Telegram,"
                                                      " —á—Ç–æ–±—ã –ø–æ–ª–µ–∑–Ω–∞—è –∏ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—å–µ—Ä–µ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"
                                                      " –±—ã–ª–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π:\n\nüíº Changellenge ¬ª ‚Äî t.me/changellenge\n"
                                                      "üß† Changellenge ¬ª Education ‚Äî t.me/changellenge_education\n\n"
                                                      "üí° –ê —á—Ç–æ–±—ã –º—ã —Å–¥–µ–ª–∞–ª–∏ –≤–µ–±–∏–Ω–∞—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –≤–∞—Å,"
                                                      " –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ —è –ø—Ä–∏—à–ª—é –≤–∞–º —à–∞–±–ª–æ–Ω"
                                                      " Problem Statement Worksheet (PSW). –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã"
                                                      " –∏ –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–≥–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á. –°"
                                                      " PSW –≤—ã –ª–µ–≥–∫–æ —Ä–∞–∑–±–µ—Ä–µ—Ç–µ—Å—å –≤ –∂–µ–ª–∞–Ω–∏—è—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–∂–Ω–æ–π –¥–µ—Ç–∞–ª–∏.",
                           keyboard=refsKB.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.BEFORE_EVENT
        person.phone = event.message
        person.registered = True
        clubEvent.persons.append(person)
        registerPerson(clubEvent)
        registeringPersons.pop(person)
    else:
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í —Ç–µ–ª–µ—Ñ–æ–Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
                           keyboard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id)
replys.append(registeringPhone)

def makeEventTime(person, event):
    if event.message == "–ù–∞–∑–∞–¥":
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î",
                           keyboaard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.MAKING_DATE
    elif re.search(r'\d\d:\d\d', event.message):
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–û—Å—Ç–≤–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ",
                           keyboard=backToMenuKeyboard.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.MAKING_DESCRIPTION
        unFinishedEvents[list(map(lambda evenent: event.adminId, events)).index(person.id)].time = event.message
    else:
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                           keyboard=backToMenuKeyboard.get_keyboard(),
                           user_ids=event.user_id)
replys.append(makeEventTime)



def makeEventDescription(person, event):
    if event.message == "–ù–∞–∑–∞–¥":
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
                           keyboard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id)
    else:
        unFinishedEvents[list(map(lambda evenent: event.adminId, events)).index(person.id)].description = event.message
        events.append(unFinishedEvents[list(map(lambda evenent: event.adminId, events)).index(person.id)])
        unFinishedEvents.pop(list(map(lambda evenent: event.adminId, events)).index(person.id))
        newEvent(events[-1])
        person.chatState = ChatState.IN_QUESTION
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–íc—ë –≥–æ—Ç–æ–≤–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?",
                           keyboard=backKeyboard.get_keyboard(),
                           user_ids=event.user_id)
replys.append(makeEventDescription)

def beforeEventReply(person, event):
    answers = ["–°—Ç—É–¥–µ–Ω—Ç 1-2 –∫—É—Ä—Å–æ–≤", "–°—Ç—É–¥–µ–Ω—Ç 3-4 –∫—É—Ä—Å–æ–≤", "–°—Ç—É–¥–µ–Ω—Ç –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç–∞", "–í—ã–ø—É—Å–∫–Ω–∏–∫, –Ω–µ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã", "–í—ã–ø—É—Å–∫–Ω–∏–∫, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã 1-2 –≥–æ–¥–∞", "–í—ã–ø—É—Å–∫–Ω–∏–∫, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã 3-5 –ª–µ—Ç"]

    [message, kb] = makeQuestionMessage(answers)
    if event.message == "üí° –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã":
        Lsvk.messages.send(random_id=get_random_id(),
                           message="–ö—Ç–æ –≤—ã?" + "\n\n" + message,
                           keyboard=kb.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.ANSWERING_ONE
        personsAnswering[person] = answers
replys.append(beforeEventReply)

def answeringOneReply(person, event):
    if event.message in personsAnswering.get(person).keys():
        person.answers["–ö—Ç–æ –≤—ã?"] = personsAnswering.get(person).get(event.message)
        personsAnswering.pop(person)
        answers = ["–ë–æ—é—Å—å –Ω–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –≤—ã–ø—É—Å–∫–∞", "–ù–µ –ø–æ–Ω–∏–º–∞—é, –∫–µ–º —Ö–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –≤—É–∑–∞", "–¢–µ–∫—É—â–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –¥–ª—è –º–µ–Ω—è", "–î—Ä—É–≥–æ–µ"]
        [kb, message] = makeQuestionMessage(answers)

        Lsvk.messages.send(random_id=get_random_id(),
                           message="–ß—Ç–æ –≤ –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?" + "\n\n" + message,
                           keyboard=kb.get_keyboard(),
                           user_ids=event.user_id)
        person.chatState = ChatState.ANSWEING_TWO
replys.append(answeringOneReply)

def answeringTwoReply(person, event):
    if event.message in personsAnswering.get(person).keys():
        if event.message == "‚óº":
            Lsvk.messages.send(random_id=get_random_id(),
                               message="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π? –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –µ–µ —Ä–µ—à–µ–Ω–∏—é ‚òùü§ì",
                               user_ids=event.user_id)
            person.chatState = ChatState.ANSWEING_TWO_OTHER
        else:
            person.answers["–ß—Ç–æ –≤ –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"] = personsAnswering.get(person).get(event.message)
            [message, kb] = makeQuestionMessage(["–ï—â—ë –Ω–µ –¥—É–º–∞–ª –æ–± —ç—Ç–æ–º",
                                                 "–•–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
                                                 "–ó–∞–¥—É–º—ã–≤–∞—é—Å—å –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏",
                                                 "–ü–ª–∞–Ω–∏—Ä—É—é —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–µ–π—Å-—á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö",
                                                 "–ë—É–¥—É –Ω–∞–±–∏—Ä–∞—Ç—å—Å—è –æ–ø—ã—Ç–∞ –Ω–∞ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö."], person)
            Lsvk.messages.send(random_id=get_random_id(),
                               message="üòû –°–æ–≥–ª–∞—Å–µ–Ω, –Ω–µ —Å–∞–º–∞—è –ø—Ä–∏—è—Ç–Ω–∞—è –≤–µ—â—å. –£–∂–µ –∑–∞–¥—É–º—ã–≤–∞–ª–∏—Å—å, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—å–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?" + "\n\n" + message,
                               keyboard=kb.get_keyboard(),
                               user_ids=event.user_id)
            person.chatState = ChatState.ANSWEING_THREE
        personsAnswering.pop(person)
replys.append(answeringTwoReply)

def answeringTwoOtherReply(person, event):
    person.answers["–ß—Ç–æ –≤ –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"] = event.message
    [message, kb] = makeQuestionMessage(["–ï—â—ë –Ω–µ –¥—É–º–∞–ª –æ–± —ç—Ç–æ–º",
                                         "–•–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
                                         "–ó–∞–¥—É–º—ã–≤–∞—é—Å—å –æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏",
                                         "–ü–ª–∞–Ω–∏—Ä—É—é —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–µ–π—Å-—á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö",
                                         "–ë—É–¥—É –Ω–∞–±–∏—Ä–∞—Ç—å—Å—è –æ–ø—ã—Ç–∞ –Ω–∞ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö."], person)
    Lsvk.messages.send(random_id=get_random_id(),
                       message="üòû –°–æ–≥–ª–∞—Å–µ–Ω, –Ω–µ —Å–∞–º–∞—è –ø—Ä–∏—è—Ç–Ω–∞—è –≤–µ—â—å. –£–∂–µ –∑–∞–¥—É–º—ã–≤–∞–ª–∏—Å—å, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—å–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?" + "\n\n" + message,
                       keyboard=kb.get_keyboard(),
                       user_ids=event.user_id)
    person.chatState = ChatState.ANSWEING_THREE
replys.append(answeringTwoOtherReply)

def answeringThreeReply(person, event):
    if event.message in personsAnswering.get(person).keys():
        person.answers["–£–∂–µ –∑–∞–¥—É–º—ã–≤–∞–ª–∏—Å—å, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—å–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?"] = personsAnswering.get(person).get(event.message)
        personsAnswering.pop(person)
        person.chatState.ANSWERING_FOUR
        [message, kb] = makeQuestionMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ hard skills",
                                            "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç soft skills",
                                            "–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –æ–ø—ã—Ç–∞",
                                            "–ë–æ—é—Å—å –Ω–µ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ —ç—Ç–∞–ø—ã –æ—Ç–±–æ—Ä–∞.")
        Lsvk.messages.send(random_id=get_random_id(),
                           message="üëçüèª –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\nü§î –ù–æ —Ä–∞–∑ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä, —É –≤–∞—Å –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –µ—Å—Ç—å —Å—Ç—Ä–∞—Ö–∏,"
                                   " —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º. –°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è!" + "\n\n" + message,
                           keyboard=kb.get_keyboard(),
                           user_ids=event.user_id)
replys.append(answeringThreeReply)

def answeringFourReply(person, event):
    if event.message in personsAnswering.get(person).keys():
        person.answers["—É –≤–∞—Å –µ—Å—Ç—å —Å—Ç—Ä–∞—Ö–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º?"] = personsAnswering.get(person).get(event.message)
        personsAnswering.pop(person)
        person.chatState = ChatState.ANSWERING_FIVE
        Lsvk.messages.send(random_id=get_random_id(),
                           message="üí° –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º! –ù–æ —É –º–µ–Ω—è –æ—Å—Ç–∞–ª—Å—è –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å.\n –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π, –ø–æ—á–µ–º—É –≤—ã —Ä–µ—à–∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä?",
                           user_ids=event.user_id)
replys.append(answeringFourReply)

def answeringFiveReply(person, event):
    person.answers["–ø–æ—á–µ–º—É –≤—ã —Ä–µ—à–∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä?"] = event.message
    Lsvk.messages.send(random_id=get_random_id(),
                       message="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –ù–µ–º–Ω–æ–≥–∏–µ —Ç–∞–∫ –æ—Ç–∑—ã–≤—á–∏–≤—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –±–æ—Ç—É ü§ñ\n\n"
                               "üëâ –õ–æ–≤–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —à–∞–±–ª–æ–Ω –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á PSW: bit.ly/2HzCxoH.\n\n"
                               "–ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ!",
                       user_ids=event.user_id)
    person.chatState  = ChatState.BEFORE_EVENT
replys.append(answeringFiveReply)


adminReplys = copy.copy(replys)
adminReplys[0] = inEventsReplyAdmin

def reply(person, event):
    if person.admin:
        adminReplys[person.chatState.value](person, event)
    else:
        replys[person.chatState.value](person, event)